#include "shader.h"
#include <glm/glm.hpp>

struct Shader_Program
{
    uint32_t id;
    inline void use()
    {
        glUseProgram(id);
    }
};

// TODO: this should be autogenerated from the shader source code
struct Generic_Program : Shader_Program
{
    GLint model_location;
    GLint view_location;
    GLint projection_location;
    GLint light_position_location;
    
    inline void set_locations()
    {
        model_location = glGetUniformLocation(id, "model");
        view_location = glGetUniformLocation(id, "view");
        projection_location = glGetUniformLocation(id, "projection");
        light_position_location = glGetUniformLocation(id, "light_position");
    }
    inline void model(glm::mat4 model)
    {
        glUniformMatrix4fv(model_location, 1, GL_FALSE, (float*)&model); 
    }
    inline void view(glm::mat4 view)
    {
        glUniformMatrix4fv(view_location, 1, GL_FALSE, (float*)&view);
    }
    inline void projection(glm::mat4 projection)
    {
        glUniformMatrix4fv(projection_location, 1, GL_FALSE, (float*)&projection);
    }
    inline void light_position(glm::vec3 light_position)
    {
        glUniform3fv(light_position_location, 1, (float*)&light_position);
    }
    inline void uniforms(glm::mat4 model_v, glm::mat4 view_v, glm::mat4 projection_v, glm::vec3 light_position_v)
    {
        model(model_v); view(view_v); projection(projection_v); light_position(light_position_v);
    }
};

struct Pawn_Program : public Generic_Program {};

struct Board_Program : public Generic_Program 
{
    GLint model_location;
    GLint view_location;
    GLint projection_location;
    GLint light_position_location;
    GLint board_dimension_location;

    inline void set_locations()
    {
        model_location = glGetUniformLocation(id, "model");
        view_location = glGetUniformLocation(id, "view");
        projection_location = glGetUniformLocation(id, "projection");
        light_position_location = glGetUniformLocation(id, "light_position");
        board_dimension_location = glGetUniformLocation(id, "board_dimension");
    }
    inline void model(glm::mat4 model)
    {
        glUniformMatrix4fv(model_location, 1, GL_FALSE, (float*)&model); 
    }
    inline void view(glm::mat4 view)
    {
        glUniformMatrix4fv(view_location, 1, GL_FALSE, (float*)&view);
    }
    inline void projection(glm::mat4 projection)
    {
        glUniformMatrix4fv(projection_location, 1, GL_FALSE, (float*)&projection);
    }
    inline void light_position(glm::vec3 light_position)
    {
        glUniform3fv(light_position_location, 1, (float*)&light_position);
    }
    inline void board_dimension(float board_dimension)
    {
        glUniform1f(board_dimension_location, board_dimension);
    }
    inline void uniforms(glm::mat4 model_v, glm::mat4 view_v, glm::mat4 projection_v, glm::vec3 light_position_v, float board_dimension_v)
    {
        model(model_v); view(view_v); projection(projection_v); light_position(light_position_v);
        board_dimension(board_dimension_v);
    }
};